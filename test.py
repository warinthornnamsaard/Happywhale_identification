# -*- coding: utf-8 -*-
"""happy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-sz5fIEiFElMWyVaa9w5zHjCZau9qnD7
"""

!pip install kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c happy-whale-and-dolphin

!unzip ./happy-whale-and-dolphin.zip

from keras.preprocessing.image import ImageDataGenerator
import numpy as np 
import pandas as pd 
import os

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

test_dir  = "/content"
test_gen = ImageDataGenerator()

test_generator = test_gen.flow_from_directory(test_dir ,
                                        target_size=(100 ,100),
                                        batch_size=1,
                                        classes = ['test_images'],
                                        shuffle = False)

from tensorflow.keras.models import load_model
Res = load_model("/content/Resnet-008-0.375236.h5")

pred =  Res.predict_generator(test_generator)

train_df = pd.read_csv("/content/train.csv")

def prepare_labels(y):
    values = np.array(y)
    label_encoder = LabelEncoder()
    integer_encoded = label_encoder.fit_transform(values)
    # print(integer_encoded)

    onehot_encoder = OneHotEncoder(sparse=False)
    integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)
    onehot_encoded = onehot_encoder.fit_transform(integer_encoded)
    # print(onehot_encoded)

    y = onehot_encoded
    # print(y.shape)
    return y, label_encoder

y, label_encoder = prepare_labels(train_df['individual_id'])

test = os.listdir("/content/test_images")

col = ['image']
test_df = pd.DataFrame(test, columns=col)
test_df['predictions'] = ''

pred

for i, pred in enumerate(pred):
  test_df.loc[i, 'predictions'] = ' '.join(label_encoder.inverse_transform(pred.argsort()[-5:][::-1]))

test_df.to_csv('submission2.csv', index=False)

os.rmdir("/content/test_images/.ipynb_checkpoints")

import tensorflow as tf
print(tf.__version__)